"""Initial tables

Revision ID: ecfb40525078
Revises: 
Create Date: 2025-09-24 08:26:30.679416

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ecfb40525078'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    op.drop_table('user')
    op.drop_table('patient')
    with op.batch_alter_table('patients', schema=None) as batch_op:
        batch_op.add_column(sa.Column('first_name', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('last_name', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('high_blood_pressure', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('high_cholesterol_level', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('has_diabetes', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('has_obesity', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('family_history_of_heart_disease', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('chronic_stress_level', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('smoking_habit', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('age_in_years', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('gender_identity', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('heart_disease_risk_score', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('risk_level', sa.String(length=50), nullable=True))
        batch_op.drop_column('name')
        batch_op.drop_column('family_history')
        batch_op.drop_column('cholesterol')
        batch_op.drop_column('age')
        batch_op.drop_column('diabetes')
        batch_op.drop_column('risk_score')
        batch_op.drop_column('smoking')
        batch_op.drop_column('chronic_stress')
        batch_op.drop_column('obesity')
        batch_op.drop_column('bp')
        batch_op.drop_column('gender')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('patients', schema=None) as batch_op:
        batch_op.add_column(sa.Column('gender', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('bp', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('obesity', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('chronic_stress', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('smoking', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('risk_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('diabetes', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('cholesterol', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('family_history', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=True))
        batch_op.drop_column('risk_level')
        batch_op.drop_column('heart_disease_risk_score')
        batch_op.drop_column('gender_identity')
        batch_op.drop_column('age_in_years')
        batch_op.drop_column('smoking_habit')
        batch_op.drop_column('chronic_stress_level')
        batch_op.drop_column('family_history_of_heart_disease')
        batch_op.drop_column('has_obesity')
        batch_op.drop_column('has_diabetes')
        batch_op.drop_column('high_cholesterol_level')
        batch_op.drop_column('high_blood_pressure')
        batch_op.drop_column('last_name')
        batch_op.drop_column('first_name')

    op.create_table('patient',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('gender', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('high_bp', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('high_cholesterol', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('diabetes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('obesity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sedentary_lifestyle', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('smoking', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('chronic_stress', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('family_history', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('probability', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('risk_level', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('patient_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('patient_pkey'))
    )
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('user_pkey')),
    sa.UniqueConstraint('email', name=op.f('user_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey')),
    sa.UniqueConstraint('email', name=op.f('users_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
